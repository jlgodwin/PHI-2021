options = pathOptions(pane = "layer2")
) %>%
addLayersControl(
overlayGroups = c(
"Public Health Clinics (2018)",
"Community Health Centers (2020)",
"Women, Infant and Children Services (2020)",
paste(names(kc_schools), "(2018)"),
"Commuter Rail Stations (2040)",
"Light Rail Stations (2040)",
"Transit Lines (2040)"
),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup(
c(
"Public Health Clinics (2018)",
"Community Health Centers (2020)",
"Women, Infant and Children Services (2020)",
paste(names(kc_schools), "(2018)"),
"Commuter Rail Stations (2040)",
"Light Rail Stations (2040)",
"Transit Lines (2040)"
)
)
})
# this function updates the map based on user input
observe({
shinyjs::showElement(id = 'loading')
sp <- sp_reactive()
proxy_map <- leafletProxy(
"map",
data = sp
) %>%
# clear the existing shapes and legend
clearShapes() %>%
clearControls() %>%
# since polyline will also be removed by the clearShape() function
# add the layer again here
addPolylines(
data = kc_tl_2040,
group = "Transit Lines (2040)",
color = "#62AC55",
weight = 3,
opacity = 0.2,
popup = sprintf(
"Transit Line Name: <strong>%s</strong>",
kc_tl_2040$Name
) %>%
lapply(htmltools::HTML),
options = pathOptions(pane = "layer2")
)
if (all_selected()) {
proxy_map <- proxy_map %>%
addPolygons(
layerId = ~GEOID,
color = "#606060",
weight = 1,
smoothFactor = 0.5,
opacity = 0.9,
fillOpacity = 0.6,
fillColor = ~ colorNumeric(
palette = "#08519C",
domain = c(100)
)(value),
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
),
label = sprintf(
popup_text_reactive(),
sp$GEOID,
sp$value
) %>%
lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
),
options = pathOptions(pane = "layer1")
) %>%
addLegend(
pal = colorNumeric(
palette = "#08519C",
domain = c(100)
),
values = c(100),
opacity = 0.7,
title = legend_title_reactive(),
position = "bottomright"
)
} else {
#define the color palette for filling the polygons based on population
#ARA_ changed N from 5 to 2
#ARA_ Added unique quant length for quantile
unique_quant_length <- length(unique(quantile(sp@data$value, seq(0,1,.2), na.rm = TRUE)))
if(unique_quant_length < 6){
col_pal <- colorQuantile(
palette = "Blues",
domain = sp@data$value,
n = 2,
na.color = NA
)
} else {
col_pal <- colorQuantile(
palette = "Blues",
domain = sp@data$value,
n = 5,
na.color = NA
)
}
# calculate the values displayed in the legend
legend_values <- quantile(sp@data$value, type = 5, names = FALSE, na.rm = TRUE)
# add the new population data to the map
proxy_map <- proxy_map %>%
addPolygons(
layerId = ~GEOID,
color = "#606060",
weight = 1,
smoothFactor = 0.5,
opacity = 0.9,
fillOpacity = 0.6,
fillColor = ~ col_pal(value),
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
),
label = sprintf(
popup_text_reactive(),
sp$GEOID,
sp$value
) %>%
lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
),
options = pathOptions(pane = "layer1")
)%>%
addLegend(
pal = col_pal,
values = ~value,
opacity = 0.7,
labFormat = {
function(type, cuts, p) {
n <- length(cuts)
lower <- as.integer(cuts)[-n]
if (-n != 1) {
lower <- as.integer(cuts)[-n] + 1
}
upper <- as.integer(cuts)[-1]
paste0(lower, " - ", upper, " (", seq(0, 100, length.out = n)[-n], "th PCTL)")
}
},
title = legend_title_reactive(),
position = "bottomright"
)
}
Sys.sleep(1)
shinyjs::hideElement(id = 'loading')
})
#-----------------plot----------
clicked_geo <- reactiveValues(df = NULL)
# if not clicking on a polygon, remove the clicked polygon info
observeEvent(input$map_click,
{
print(paste("MAP", input$map_click))
clicked_geo$df <- NULL
},
priority = 100
)
# if clicking on a polygon, save the clicked polygon info
observeEvent(input$map_shape_click,
{
print(paste("MAP SHAPE", input$map_shape_click))
if (!is.null(input$map_shape_click$id)) {
if (geo_reactive()) {
clicked_geo$df <- tract_proj %>%
filter(GEOID == input$map_shape_click$id)
} else {
clicked_geo$df <- hra_proj %>%
filter(GEOID == input$map_shape_click$id)
}
}
},
priority = 99
)
# generate a dataframe for the line chart
df_reactive <- reactive({
# used the clicked polygon
df <- clicked_geo$df
# if no polygon is clicked, use the county total data
if (is.null(df)) {
if (geo_reactive()) {
df <- tract_proj
} else {
df <- hra_proj
}
}
df <- df %>%
select(-GEOID)
# calculate the data based on user input; similar to the process in sp_reactive()
if (measure_reactive() == "Count") {
df <- df %>%
group_by(Year, Age5, Sex, Race) %>%
summarize(value = sum(value))
} else {
df <- df %>%
group_by(Year, Age5, Sex, Race) %>%
summarize(value = sum(value)) %>%
group_by(Year) %>%
mutate(
percentage = round(value / sum(value) * 100, 2)
) %>%
select(-value)
colnames(df)[5] <- "value"
}
df <- df %>%
filter(
Age5 %in% age_reactive(),
Sex %in% sex_reactive()
) %>%
group_by(Year, Race) %>%
summarize(value = sum(value))
# add rows for the total population of all race and ethnicity categories
df <- rbind(
df %>%
mutate(Race = "Total") %>%
group_by(Year, Race) %>%
summarize(value = sum(value)) %>%
arrange(Year),
df %>%
arrange(Race, Year)
)
df
})
output$plot <- renderPlotly({
df <- df_reactive()
yr = as.integer(year_reactive())
P <- plot_ly(
type = "scatter",
mode = "lines"
) %>%
# add the vertical dash line at 2020
layout(
yaxis = list(rangemode = "tozero"),
shapes = list(
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = 2020,
x1 = 2020,
line = list(
dash = "dash",
width = 2,
color = "black"
)
)
)
)
# pre-define the colors for drawing lines for different race and ethnicity categories
col_pal <- c(
c(
"rgba(1,1,1,1)",
"rgba(127,201,127,1)",
"rgba(190,174,212,1)",
"rgba(253,192,134,1)",
"rgba(255,255,153,1",
"rgba(56,108,176,1)",
"rgba(240,2,127,1)",
"rgba(191,91,23,1)"
)
)
index <- NULL
races <- unique(df$Race)
selected_race <- "Total"
if (length(race_reactive()) != 7) {
selected_race <- race_reactive()
}
# draw the lines for the unselected race and ethnicity categories and hide them first
for (i in 1:length(races)) {
curr_race <- races[i]
if (curr_race != selected_race) {
pop <- filter(df, Race == curr_race)$value
P <- add_trace(
P,
x = ~ unique(df$Year),
y = pop,
name = curr_race,
line = list(
color = col_pal[i],
width = 2
),
visible = "legendonly"
)
} else {
index <- i
}
}
temp_yval <- filter(filter(df, Race == selected_race), Year == yr)[["value"]]
# draw the line for the selected race/ethnicity
P <- add_trace(
P,
x = ~ unique(df$Year),
y = ~ filter(df, Race == selected_race)$value,
name = selected_race,
line = list(
color = col_pal[index],
width = 4
)
)
# add titles
P <- layout(
P,
title = ifelse(
is.null(clicked_geo$df),
"County-Level Population of the Selected Groups",
paste0(
"Population of the Selected Groups, Selected ",
ifelse(
geo_reactive(),
"Tract (GEOID: ",
"HRA ("
),
clicked_geo$df$GEOID[1],
")"
)
),
xaxis = list(
title = "Year",
tickformat = "K"
),
yaxis = list(
title = ifelse(
measure_reactive() == "Count",
"Population",
"Population (%)"
)
)
)
P
})
# generate a button for going back to the county-level data if a polygon is clicked
output$reset_chart_button <- renderUI(
if (!is.null(clicked_geo$df)) {
actionButton(
inputId = "reset_line_chart",
label = "Go Back to County-Level Data"
)
}
)
# generate a button for quickly selecting all age groups when not all age groups are selected
output$all_age_button <- renderUI(
if (length(age_reactive()) != 18) {
actionButton(
inputId = "all_age",
label = "Select All Age Groups"
)
}
)
# if "Select All Age Groups" button is clicked, update the input
observeEvent(input$all_age, {
updateSliderTextInput(
session,
inputId = "age",
label = "Age Range",
choices = c(seq(0, 85, 5), "85+"),
selected = c("0", "85+")
)
})
# if "Go Back to County-Level Data" button is clicked, set the clicked polygon to NULL
observeEvent(input$reset_line_chart, {
clicked_geo$df <- NULL
})
# define the helper text the visualizations
selected_charac_html_text <- reactiveValues()
observe({
sex <- "female and male"
if (length(sex_reactive()) == 1) {
sex <- tolower(sex_reactive())
}
race <- "population of all racial and ethnic groups"
if (length(race_reactive()) == 1 ) {
race <- paste0(race_reactive(), " population")
}
age <- "NA"
lower <- "NA"
upper <- "NA"
l = length(age_reactive())
if (l != 0) {
lower <- str_split(age_reactive()[1], "-")[[1]][1]
upper <- age_reactive()[l]
if (upper == "85+") {
age <- paste0(
"[",
lower,
"-85+)"
)
} else {
upper <- as.integer(str_split(age_reactive()[l], "-")[[1]][2]) + 1
age <- paste0(
"[",
lower,
"-",
upper,
")"
)
}
}
selected_charac_html_text$map <- paste0(
"Currently displaying <strong>population ",
tolower(measure_reactive()), "s",
"</strong> for the <strong>",
sex, " ", race,
"</strong> aged <strong>",
age,
"</strong> for the year <strong>",
year_reactive(),
"</strong> at the <strong>",
ifelse(
geo_reactive(),
"census tract",
"HRA"
),
"</strong> level."
)
selected_charac_html_text$plot <- paste0(
"Currently displaying <strong>population ",
tolower(measure_reactive()), "s",
"</strong> for the <strong>",
sex, " ", race,
"</strong> aged <strong>",
age,
"</strong>."
)
if (length(age_reactive()) == 18) {
selected_charac_html_text$age <- "All age groups are selected"
} else {
if (upper == "85+") {
selected_charac_html_text$age <- paste0(
"Selected Age Range: ",
age,
"</br>(i.e. ",
lower,
" ≤ Selected Ages)"
)
} else {
selected_charac_html_text$age <- paste0(
"Selected Age Range: ",
age,
"</br>(i.e. ",
lower,
" ≤ Selected Ages < ",
upper,
")"
)
}
}
})
observe({
addTooltip(
session,
id = "age",
title = selected_charac_html_text$age,
placement = "top",
options = list(html = TRUE)
)
})
observe({
addTooltip(
session,
id = "map",
title = selected_charac_html_text$map,
placement = "right",
options = list(html = TRUE)
)
})
observe({
addTooltip(
session,
id = "plot",
title = selected_charac_html_text$plot,
placement = "right",
options = list(html = TRUE)
)
})
# preload the visualization once the website is opened
outputOptions(output, "map", suspendWhenHidden = FALSE)
outputOptions(output, "plot", suspendWhenHidden = FALSE)
}
library(tidycensus)
library(tidyverse)
library(sf)
library(stringr)
library(ipumsr)
library(data.table)
library(gridExtra)
library(sp)
library(rgdal)
library(rgeos)
library(geosphere)
library(RColorBrewer)
library(classInt)
library(scales)
library(tidyr)
library(jsonlite)
library(rjson)
library(geojsonsf)
