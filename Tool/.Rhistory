other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "desmoines",
new.string = "Des Moines",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "Highpoint",
new.string = "High Point",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "I live in auburn",
new.string =  "Auburn",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = c("I live in Renton",
"i live renton but i spend most of my time in white center",
"renton"),
new.string =  "Renton",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "I live in Kent",
new.string =  "Kent",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = c("seatac",
"Seatac",
"seatac, wa 98168",
"Sectac"),
new.string =  "SeaTac",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "No, i live in Capitol Hill",
new.string =  "Capitol Hill",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings =
c("I live rigt in front of zone 2 on SW 116th st",
"near zone 6"),
new.string =  "Burien",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings =
"I live right outside the edge of zone 2 and west seattle",
new.string =  "West Seattle",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings =
"Very close to Roxhill Park, just outside zone 1.",
new.string =  "Roxhill",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "South Bellevue",
new.string =  "Bellevue",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "No, I live in Tukwila",
new.string =  "Tukwila",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = "south pard",
new.string =  "South Park",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings = c("North seattle",
"seattle"),
new.string =  "Seattle",
data.wide = other.old)
other.old <- clean_other(prefix = question,
cleaned.prefix = question.cleaned,
old.strings =
c("Lived in white center 3 years ago.  I still visit eco now attending origrams",
"Supporter from afar, previous WC resident/WCCDA employee"),
new.string =  "No Information",
data.wide = other.old)
table(other.old$LivingAreaCleaned_Other,
useNA = "ifany")
table(other.old$LivingArea_Label)
other.old <- relabel_other(label.prefix = question,
other.prefix = question.cleaned,
new.label.prefix = question.cleaned,
old.labels = "Burien",
new.label = "No, I live in Burien",
data.wide = other.old)
other.old <- rekey_other(key.prefix = question,
other.prefix = question.cleaned,
new.key.prefix = question.cleaned,
old.labels = "Burien",
new.label = "No, I live in Burien",
data.wide = other.old)
other.old <- relabel_other(label.prefix = question,
other.prefix = question.cleaned,
new.label.prefix =question.cleaned,
old.labels = c("Beacon Hill",
"Capitol Hill",
"Georgetown",
"High Point",
"Roxhill",
"Seattle",
"South Delridge",
"South Park",
"West Seattle"),
new.label = "No, I live in Seattle",
data.wide = other.old)
other.old <- rekey_other(key.prefix = question,
other.prefix = question.cleaned,
new.key.prefix = question.cleaned,
old.labels = c("Beacon Hill",
"Capitol Hill",
"Georgetown",
"High Point",
"Roxhill",
"Seattle",
"South Delridge",
"South Park",
"West Seattle"),
new.label = "No, I live in Seattle",
data.wide = other.old)
other.old <- relabel_other(label.prefix = question,
other.prefix = question.cleaned,
new.label.prefix = question.cleaned,
old.labels = "No Information",
new.label = "Not Answered",
data.wide = other.old)
other.old <- rekey_other(key.prefix = question,
other.prefix = question.cleaned,
new.key.prefix = question.cleaned,
old.labels = "No Information",
new.label = "Not Answered",
data.wide = other.old)
other.old %>%
group_by(LivingArea_Label,
LivingAreaCleaned_Label,
LivingArea_Key,
LivingAreaCleaned_Key) %>%
summarise(NumChanged = n()) %>%
filter(LivingArea_Label !=
LivingAreaCleaned_Label) %>%
as.data.frame()
question.wide <- question.wide %>%
## add the modified columns of
## other.old
left_join(other.old %>%
dplyr::select(RespondentID,
contains("Cleaned_"))) %>%
## rename columns to match question.wide
rename(LivingAreaCleanedOther = LivingAreaCleaned_Other,
LivingAreaCleanedLabel_1 = LivingAreaCleaned_Label,
LivingAreaCleanedKey_1 = LivingAreaCleaned_Key) %>%
mutate(LivingAreaCleanedItemType_1 = LivingAreaItemType_1)
question.wide %>%
group_by(LivingAreaOther,
LivingAreaCleanedOther,
LivingAreaLabel_1,
LivingAreaCleanedLabel_1,
LivingAreaKey_1,
LivingAreaCleanedKey_1) %>%
summarise(NumChanged = n()) %>%
filter(LivingAreaLabel_1 !=
LivingAreaCleanedLabel_1) %>%
as.data.frame()
question.long <- question.wide %>%
select(c("Section", "RespondentID",
contains(question.cleaned))) %>%
pivot_longer(cols = contains(c("Label", "Key", "ItemType")),
names_to = c("VarName",".value","Answer"),
names_pattern = paste0("(",
question.cleaned,
")(.*)_(.)")) %>%
mutate(Question = unique(table.ns$Question)) %>%
rename_with(~gsub(paste0(question.cleaned, "Other"),
"Other", .x)) %>% as.data.frame()
question.long <- question.long[, names(surveylist_long[[section]])]
surveylist_long[[section]] <- rbind.data.frame(surveylist_long[[section]],
question.long)
table.ns.clean <- question.wide %>%
select(c("Section", "RespondentID",
contains(question.cleaned))) %>%
pivot_longer(cols = contains(c("Label", "Key", "ItemType")),
names_to = c("VarName",".value","Answer"),
names_pattern = paste0("(",
question.cleaned,
")(.*)_(.)")) %>%
mutate(Question = unique(table.ns$Question)) %>%
create_codebook(., save = FALSE)
printCodebook_ns(table.ns.clean)
section.table.ns[[question.cleaned]] <- table.ns.clean
old.prefix <- "LivingAreaCleaned"
new.prefix <- "LiveInWC"
## Get labels from old.prefix
old.labels <- section.table.ns[[old.prefix]] %>%
ungroup() %>%
dplyr::select(Label) %>%
filter(!(Label %in% c("Not Answered",
"Not Asked"))) %>%
unlist() %>% unique()
old.labels
## Assign new label for new.prefix
## to each place in old label that applies
new.labels <- old.labels
new.labels[c(1:3,10)] <- "No"
new.labels[4:9] <- "Yes"
## check if makes sense?
cbind.data.frame(old.labels,
new.labels)
question.wide <- collapse_labels(old.prefix = old.prefix,
new.prefix = new.prefix,
old.labels = old.labels,
new.labels = new.labels,
qtype = "binary",
data.wide = question.wide)
question.wide %>%
group_by(LivingAreaCleanedLabel_1,
LiveInWCLabel_1,
LivingAreaCleanedKey_1,
LiveInWCKey_1) %>%
summarise(N= n()) %>%
as.data.frame()
table.ns.recode <- question.wide %>%
select(c("Section", "RespondentID",
contains(new.prefix))) %>%
pivot_longer(cols = contains(c("Label", "Key", "ItemType")),
names_to = c("VarName",".value","Answer"),
names_pattern = paste0("(",
new.prefix,
")(.*)_(.)")) %>%
mutate(Question = unique(table.ns$Question)) %>%
create_codebook(., save = FALSE)
printCodebook_ns(table.ns.recode)
section.table.ns[[new.prefix]] <- table.ns.recode
install.packages('sitar')
library(sitar)
vignette('sitar')
?sitar
data(heights)
##  fit simple model
(m1 <- sitar(x=age, y=height, id=id, data=heights, df=5))
m1
summary(m1)
names(m1)
m1$coefficients$fixed
m1$modelStruct
m1$coefficients$random
??sitar
ff <- na.omit(berkeley[berkeley$sex == 2 & berkeley$age >= 8 & berkeley$age <= 18,
c('id', 'age', 'height')])
fh1 <- sitar(x = age, y = height, id = id, data = ff, df = 5)
fh1$coefficients$fixed
fh1$fixDF
fh1$apVar
fh1$fitnlme
fh1$modelStruct
fh1$coefficients$fixed
fh1$coefficients$random
?mplot
58*40*52
58*40*50
getwd
getwd()
setwd('~/Dropbox/PHI2021/Github/PHI-2021/Tool/')
ls
list.files()
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
rsconnect::writeManifest()
install.packages(c("V8","geojson","geojsonio", "geojsonsf", "geometries", "jqr", "jsonify", "plotly", "protolite", "rapidjsonr"))
rsconnect::writeManifest()
install.packaes(c("shinyjs", "shinydashboard", "shinycssloaders", "shinyWidgets", "shinyBS"))
install.packages(c("shinyjs", "shinydashboard", "shinycssloaders", "shinyWidgets", "shinyBS"))
rsconnect::writeManifest()
sessionInfo()
library(rgeos)
sessionInfo()
install.packages('rgeos')
rsconnect::writeManifest()
rsconnect::writeManifest()
HTML("Exploring King County:\n Our Population & Households")
rsconnect::writeManifest()
rsconnect::writeManifest()
rsconnect::writeManifest()
rsconnect::writeManifest()
sprintf("e with %1$2d digits = %2$.*1$g", n, exp(1))
n <- 10
sprintf("e with %1$2d digits = %2$.*1$g", n, exp(1))
sprintf("min 10-char string '%10s'",
c("a", "ABC", "and an even longer one"))
xx <- sprintf("%1$d %1$x %1$X", 0:15)
xx
sprintf("$%g (%g)", 100000.235 , 10.33)
sprintf("$%g (%g)", 100000.235 , 10000000.33)
sprintf("$%2g (%1g)", 100000.235 , 1)
sprintf("$%2$g (%1$g)", 100000.235 , 1)
sprintf("%s $%2$g (%1$g)", "income", 100000.235 , 1)
sprintf("%s $%3$g (%2$g)", "income", 100000.235 , 1)
sprintf("%1$s $%3$g (%2$g)", "income", 100000.235 , 1)
rsconnect::writeManifest()
# setwd() ####
setwd('~/Dropbox/PHI2021/Github/PHI-2021/Tutorials/')
# Libraries ####
library(tidycensus)
library(sf)
library(tidyr)
library(dplyr)
library(sp)
library(rgdal)
library(rgeos)
library(geosphere)
library(raster)
library(RColorBrewer)
library(classInt)
library(scales)
library(magrittr)
library(bayesPop)
library(readxl)
## tidycensus key ####
source('tidycensus_APIkey.R')
census_api_key(myKey)
# Clear environment ####
rm(list = ls())
myKey <- "493b01690c601ceeadbfc1bfc0089bae12b3f476"
census_api_key(myKey)
## tidycensus shapefile cache ####
options(tigris_use_cache = TRUE)
## load pyramid script ###
source('pyrPlot_JG_20210914.R')
hh_tract <- readRDS(paste0('../household_size/',
'hh_by_hh_size_and_tenure_ct.RDS'))
# hh_hra_smoothed <- readRDS(paste0('../household_size/',
#                                   'Report_estimates/',
#                                   'average_hh_size_renters_hra.RDS'))
hh_kc_preds <- readRDS(paste0('../household_size/',
'Report_estimates/',
'housing_indicators_kc_preds.rds'))
kc_tracts <- get_acs("tract",
table = "B01001",
geometry = TRUE,
year = 2019,
survey = "acs5",
state = "WA",
county = "King",
cache_table = TRUE) %>%
filter(variable == "B01001_001") %>%
filter(!st_is_empty(geometry))
names(kc_tracts)
kc_tracts_2000 <- get_acs("tract",
table = "B01001",
geometry = TRUE,
year = 2009,
survey = "acs5",
state = "WA",
county = "King",
cache_table = TRUE) %>%
filter(variable == "B01001_001") %>%
filter(!st_is_empty(geometry))
### Convert to sp ####
kc_tracts_poly <- kc_tracts %>%
st_geometry() %>%
as(., "Spatial")
kc_tracts_2000_poly <- kc_tracts_2000 %>%
st_geometry() %>%
as(., "Spatial")
kc_tracts_2000_poly <- spTransform(kc_tracts_2000_poly,
kc_tracts_poly@proj4string)
## HRA ####
hra <- readOGR(dsn = "../Data",
layer = "HRA_2010Block_Clip")
hra <- spTransform(hra,
kc_tracts_poly@proj4string)
## tracts_to_hra ####
load('../Data/tracts_to_hra.rda')
hh_size_hra <- hh_tract %>%
filter(Year >= 2010) %>%
left_join(tracts_to_hra$acs5_2019,
by = c("GEOID" = "GEOID")) %>%
group_by(FID_HRA_20, HRA2010v2_, Year, hh_size, tenure) %>%
summarise(estimate = sum(estimate*prop.area, na.rm = TRUE),
moe = sum(moe*prop.area, na.rm = TRUE)) %>%
mutate(SE = moe/qnorm(.95),
CoV = SE/estimate)
hh_size_hra_2000 <- hh_tract %>%
filter(Year < 2010) %>%
left_join(tracts_to_hra$acs5_2009,
by = c("GEOID" = "GEOID")) %>%
group_by(FID_HRA_20, HRA2010v2_, Year, hh_size, tenure) %>%
summarise(estimate = sum(estimate*prop.area, na.rm = TRUE),
moe = sum(moe*prop.area, na.rm = TRUE)) %>%
mutate(SE = moe/qnorm(.95),
CoV = SE/estimate)
head(hh_size_hra_2000)
head(hh_size_hra_2010)
head(hh_size_hra)
write.csv(rbind.data.frame(hh_size_hra, hh_size_hra_2000), file = "../Data/hhsize_hra.csv", row.names = FALSE)
edu_data <- read.csv("../Data/edu_attainment_data.csv")
## Census 2010 and later ####
names(edu_data)
edu_data_hra_2010 <- edu_data %>%
mutate(GEOID = as.character(GEOID)) %>%
filter(Year >= 2010) %>%
filter(GEOID %in% kc_tracts$GEOID) %>%
mutate(SE = moe/qnorm(.9)) %>%
pivot_longer(cols = c("less_than_hs",
"hs_grad",
"some_college",
"college_grad"),
names_to = "Education",
values_to = "Educ_Val") %>%
filter(Educ_Val == 1) %>%
left_join(tracts_to_hra$acs5_2019,
by = c("GEOID" = "GEOID"),
suffix = c("", "_toHRA")) %>%
ungroup() %>%
arrange(Year, FID_HRA_20,
variable, Education) %>%
group_by(Year, FID_HRA_20, HRA2010v2_,
variable, Education) %>%
summarise(estimate = sum(prop.area*estimate),
SE = sum(prop.area*SE)) %>%
mutate(CoV = SE/estimate)
edu_data_hra_2000 <- edu_data %>%
mutate(GEOID = as.character(GEOID)) %>%
filter(Year < 2010) %>%
filter(GEOID %in% kc_tracts$GEOID) %>%
mutate(SE = moe/qnorm(.9)) %>%
pivot_longer(cols = c("less_than_hs",
"hs_grad",
"some_college",
"college_grad"),
names_to = "Education",
values_to = "Educ_Val") %>%
filter(Educ_Val == 1) %>%
left_join(tracts_to_hra$acs5_2009,
by = c("GEOID" = "GEOID"),
suffix = c("", "_toHRA")) %>%
ungroup() %>%
arrange(Year, FID_HRA_20,
variable, Education) %>%
group_by(Year, FID_HRA_20, HRA2010v2_,
variable, Education) %>%
summarise(estimate = sum(prop.area*estimate),
SE = sum(prop.area*SE)) %>%
mutate(CoV = SE/estimate)
## Census 2000 and later ####
names(edu_data)
## Combine both ####
edu_data_hra <- bind_rows(edu_data_hra_2010,
edu_data_hra_2000) %>%
arrange(Year, FID_HRA_20, Education) %>%
filter(!is.na(estimate))
write.csv(edu_data_hra, file = "../Data/edu_hra.csv", row.names = FALSE)
burden <- read.csv('../Data/tract_rent_burden_pop.csv')
## Census 2010 and later ####
names(burden)
burden_hra_2010 <- burden %>%
dplyr::select(GEOID, Year,
value, SE,
variable) %>%
mutate(GEOID = as.character(GEOID)) %>%
rename("burden" = "variable") %>%
filter(Year >= 2010) %>%
filter(GEOID %in% kc_tracts$GEOID) %>%
left_join(tracts_to_hra$acs5_2019,
by = c("GEOID" = "GEOID"),
suffix = c("", "_toHRA")) %>%
ungroup() %>%
arrange(Year, FID_HRA_20, burden) %>%
group_by(Year, FID_HRA_20, HRA2010v2_, burden) %>%
summarise(value = sum(prop.area*value),
SE = sum(prop.area*SE)) %>%
mutate(CoV = SE/value)
## Census 2000 and later ####
names(burden)
burden_hra_2000 <- burden %>%
dplyr::select(GEOID, Year,
value, SE,
variable) %>%
rename("burden" = "variable") %>%
mutate(GEOID = as.character(GEOID)) %>%
filter(Year < 2010) %>%
filter(GEOID %in% kc_tracts_2000$GEOID) %>%
left_join(tracts_to_hra$acs5_2009,
by = c("GEOID" = "GEOID"),
suffix = c("", "_toHRA")) %>%
ungroup() %>%
arrange(Year, FID_HRA_20, burden) %>%
group_by(Year, FID_HRA_20, HRA2010v2_, burden) %>%
summarise(value = sum(prop.area*value),
SE = sum(prop.area*SE)) %>%
mutate(CoV = SE/value)
## Combine both ####
burden_hra <- bind_rows(burden_hra_2010,
burden_hra_2000) %>%
arrange(Year, FID_HRA_20) %>%
filter(!is.na(value))
write(burden_hra, file = "../Data/burden_hra.csv", row.names = FALSE)
write.csv(burden_hra, file = "../Data/burden_hra.csv", row.names = FALSE)
rsconnect::writeManifest()
setwd(../Tool)
setwd("../Tool")
rsconnect::writeManifest()
